generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?

  username String? @unique

  accounts Account[]
  sessions Session[]

  createdSubreddits Subreddit[] @relation("CreatedBy")

  subscriptions Subscription[]

  posts Post[]
  votes Vote[]

  comments     Comment[]
  commentVotes CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subreddit {
  id   String @id @default(cuid())
  name String @unique

  posts Post[]

  creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creatorId String?

  subscribers Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, subredditId])
}

model Post {
  id      String  @id @default(cuid())
  title   String
  content String?

  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  votes    Vote[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(cuid())
  comment String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  author   User?   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId String?

  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[] @relation("ReplyTo")

  votes CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  type VoteType

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

model CommentVote {
  type VoteType

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commentId])
}

enum VoteType {
  UP
  DOWN
}
